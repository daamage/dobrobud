import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler,
    MessageHandler, CallbackQueryHandler,
    filters, ContextTypes
)
import asyncio
from datetime import datetime
from aiohttp import web

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render
BOT_TOKEN = "8390533970:AAH7dcxqGqryY7F7UxQYlit_2z1fdcc0mAk"
CHAT_ID = -4887312460  # –ß–∞—Ç –¥–ª—è –∑–∞—è–≤–æ–∫
PORT = int(os.getenv('PORT', 8000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://your-dobrobud-bot.onrender.com')

user_responses = {}

class DobrobudBot:
    def __init__(self):
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render
        self.application = Application.builder().token(BOT_TOKEN)\
            .connect_timeout(60.0)\
            .read_timeout(60.0)\
            .write_timeout(60.0)\
            .pool_timeout(60.0)\
            .build()
        self.setup_handlers()
        self.setup_error_handlers()

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("info", self.info_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    def setup_error_handlers(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        self.application.add_error_handler(self.error_handler)

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling update {update}: {context.error}")
        
        if update and update.effective_chat:
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start"
                )
            except Exception as e:
                logger.error(f"Failed to send error message: {e}")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user_id = update.effective_user.id
            user_responses[user_id] = {
                'stage': 'choose_service',
                'data': {},
                'timestamp': datetime.now()
            }
            
            welcome_message = (
                "üèóÔ∏è **–í—ñ—Ç–∞—î–º–æ –≤ –∫–æ–º–ø–∞–Ω—ñ—ó –î–û–ë–†–û–ë–£–î!** üè†\n\n"
                "üî® –ú–∏ –Ω–∞–¥–∞—î–º–æ —è–∫—ñ—Å–Ω—ñ –±—É–¥—ñ–≤–µ–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏\n"
                "üë∑‚Äç‚ôÇÔ∏è –î–æ—Å–≤—ñ–¥—á–µ–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏ —Ç–∞ —Å—É—á–∞—Å–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è\n"
                "‚ö° –®–≤–∏–¥–∫–æ, —è–∫—ñ—Å–Ω–æ, –Ω–∞–¥—ñ–π–Ω–æ!\n\n"
                "üìã **–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?**"
            )
            
            keyboard = [
                [InlineKeyboardButton("üß± –ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏", callback_data="service_materials")],
                [InlineKeyboardButton("üë∑‚Äç‚ôÇÔ∏è –ù–∞–π–º —Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤", callback_data="service_workers")],
                [InlineKeyboardButton("üîß –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —Ç–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è", callback_data="service_tools")],
                [InlineKeyboardButton("üè† –ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data="service_construction")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')
            logger.info(f"User {user_id} started using Dobrobud bot")
        except Exception as e:
            logger.error(f"Error in start_command: {e}")

    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            info_message = (
                "üèóÔ∏è **–ö–æ–º–ø–∞–Ω—ñ—è –î–û–ë–†–û–ë–£–î** üè†\n\n"
                "üìç **–ù–∞—à—ñ –ø–æ—Å–ª—É–≥–∏:**\n"
                "‚Ä¢ üß± –ü–æ—Å—Ç–∞—á–∞–Ω–Ω—è –±—É–¥—ñ–≤–µ–ª—å–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤\n"
                "‚Ä¢ üë∑‚Äç‚ôÇÔ∏è –ù–∞–¥–∞–Ω–Ω—è –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤\n"
                "‚Ä¢ üîß –û—Ä–µ–Ω–¥–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ —Ç–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è\n"
                "‚Ä¢ üè† –í–∏–∫–æ–Ω–∞–Ω–Ω—è –±—É–¥—ñ–≤–µ–ª—å–Ω–∏—Ö —Ä–æ–±—ñ—Ç\n\n"
                "‚≠ê **–ß–æ–º—É –æ–±–∏—Ä–∞—é—Ç—å –Ω–∞—Å:**\n"
                "‚úÖ –Ø–∫—ñ—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –≤—ñ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤\n"
                "‚úÖ –î–æ—Å–≤—ñ–¥—á–µ–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n"
                "‚úÖ –°—É—á–∞—Å–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –≤ —ñ–¥–µ–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ\n"
                "‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ñ —Ü—ñ–Ω–∏ —Ç–∞ –≥–Ω—É—á–∫—ñ —É–º–æ–≤–∏\n"
                "‚úÖ –ì–∞—Ä–∞–Ω—Ç—ñ—è –Ω–∞ –≤—Å—ñ –≤–∏–¥–∏ —Ä–æ–±—ñ—Ç\n\n"
                "üìû **–ö–æ–Ω—Ç–∞–∫—Ç–∏:**\n"
                "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +38 (067) 123-45-67\n"
                "üìß Email: info@dobrobud.ua\n"
                "üåê –°–∞–π—Ç: www.dobrobud.ua\n\n"
                "üëÜ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É!"
            )
            
            await update.message.reply_text(info_message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error in info_command: {e}")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        try:
            status_message = (
                f"ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –î–û–ë–†–û–ë–£–î**\n\n"
                f"‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–∞ Render\n"
                f"üïê –ß–∞—Å: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}\n"
                f"üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—è–≤–æ–∫: {len(user_responses)}\n"
                f"üåê URL: `{WEBHOOK_URL}`"
            )
            await update.message.reply_text(status_message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error in status_command: {e}")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            help_text = (
                "üìã **–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –î–û–ë–†–û–ë–£–î:**\n\n"
                "/start - üöÄ –ü–æ—á–∞—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏\n"
                "/info - ‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é\n"
                "/help - ‚ùì –î–æ–ø–æ–º–æ–≥–∞\n"
                "/status - üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
                "üèóÔ∏è **–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:**\n"
                "1Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –ø–æ—Å–ª—É–≥—É\n"
                "2Ô∏è‚É£ –í–∫–∞–∂—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
                "3Ô∏è‚É£ –ó–∞–ª–∏—à—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ\n"
                "4Ô∏è‚É£ –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏!\n\n"
                "üí¨ –ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –æ–±–∏—Ä–∞–π—Ç–µ –≤–∞—Ä—ñ–∞–Ω—Ç–∏!"
            )
            await update.message.reply_text(help_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error in help_command: {e}")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user_id = update.effective_user.id
            text = update.message.text.strip()
            
            logger.info(f"Processing message from user {user_id}: {text}")

            if user_id not in user_responses:
                await update.message.reply_text(
                    "üîÑ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏.\n"
                    "‚ÑπÔ∏è –ê–±–æ /info –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é."
                )
                return

            stage = user_responses[user_id]['stage']
            data = user_responses[user_id]['data']

            if stage == 'ask_contact_name':
                data['contact_name'] = text
                user_responses[user_id]['stage'] = 'ask_phone'
                await update.message.reply_text(
                    "üìû **–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:**\n"
                    "üì± –ù–∞–ø—Ä–∏–∫–ª–∞–¥: +38 067 123 45 67"
                )

            elif stage == 'ask_phone':
                data['phone'] = text
                user_responses[user_id]['stage'] = 'ask_object_address'
                await update.message.reply_text(
                    "üìç **–í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –æ–±'—î–∫—Ç–∞:**\n"
                    "üè† –ú—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É\n"
                    "üìù –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –º. –ö–∏—ó–≤, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1"
                )

            elif stage == 'ask_object_address':
                data['object_address'] = text
                user_responses[user_id]['stage'] = 'ask_timeline'
                
                timeline_message = "‚è∞ **–ù–∞ –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ?**"
                keyboard = [
                    [InlineKeyboardButton("üî• –¢–µ—Ä–º—ñ–Ω–æ–≤–æ (—Å—å–æ–≥–æ–¥–Ω—ñ)", callback_data="timeline_urgent")],
                    [InlineKeyboardButton("‚ö° –ó–∞–≤—Ç—Ä–∞", callback_data="timeline_tomorrow")],
                    [InlineKeyboardButton("üìÖ –ù–∞ —Ü—å–æ–º—É —Ç–∏–∂–Ω—ñ", callback_data="timeline_week")],
                    [InlineKeyboardButton("üìÜ –ù–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ç–∏–∂–Ω—ñ", callback_data="timeline_next_week")],
                    [InlineKeyboardButton("üóìÔ∏è –Ü–Ω—à–∏–π —Ç–µ—Ä–º—ñ–Ω", callback_data="timeline_other")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(timeline_message, reply_markup=reply_markup)

            elif stage == 'ask_timeline_custom':
                data['timeline'] = text
                await self.show_final_confirmation(update, context, user_id)

            elif stage == 'ask_additional_info':
                data['additional_info'] = text
                await self.show_final_confirmation(update, context, user_id)

        except Exception as e:
            logger.error(f"Error in handle_message: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É.")

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        data = query.data
        
        logger.info(f"CALLBACK - User {user_id} clicked: {data}")
        
        try:
            await query.answer()
        except Exception as e:
            logger.error(f"Error answering callback: {e}")
            return

        if user_id not in user_responses:
            try:
                await query.edit_message_text("üîÑ –°–µ—Å—ñ—è –≤—Ç—Ä–∞—á–µ–Ω–∞. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.")
            except Exception as e:
                logger.error(f"Error editing message: {e}")
            return

        try:
            if data.startswith("service_"):
                await self.handle_service_selection(query, context, user_id, data)
            elif data.startswith("materials_"):
                await self.handle_materials_selection(query, context, user_id, data)
            elif data.startswith("workers_"):
                await self.handle_workers_selection(query, context, user_id, data)
            elif data.startswith("tools_"):
                await self.handle_tools_selection(query, context, user_id, data)
            elif data.startswith("construction_"):
                await self.handle_construction_selection(query, context, user_id, data)
            elif data.startswith("timeline_"):
                await self.handle_timeline_selection(query, context, user_id, data)
            elif data == "confirm_order":
                await self.process_final_order(query, context, user_id)
            elif data == "edit_order":
                await self.restart_order(query, context, user_id)
            elif data == "add_info":
                await self.ask_additional_info(query, context, user_id)

        except Exception as e:
            logger.error(f"Error processing callback: {e}")
            try:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ /start")
            except:
                pass

    async def handle_service_selection(self, query, context, user_id, data):
        user_data = user_responses[user_id]['data']
        
        if data == "service_materials":
            user_data['service_type'] = "–ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏"
            user_responses[user_id]['stage'] = 'ask_materials_type'
            
            message = "üß± **–Ø–∫—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ?**"
            keyboard = [
                [InlineKeyboardButton("üè† –¶–µ–º–µ–Ω—Ç —Ç–∞ —Ä–æ–∑—á–∏–Ω–∏", callback_data="materials_cement")],
                [InlineKeyboardButton("üß± –¶–µ–≥–ª–∞ —Ç–∞ –±–ª–æ–∫–∏", callback_data="materials_bricks")],
                [InlineKeyboardButton("ü™® –ü—ñ—Å–æ–∫, —â–µ–±—ñ–Ω—å, –≤—ñ–¥—Å—ñ–≤", callback_data="materials_bulk")],
                [InlineKeyboardButton("üèóÔ∏è –ê—Ä–º–∞—Ç—É—Ä–∞ —Ç–∞ –º–µ—Ç–∞–ª", callback_data="materials_metal")],
                [InlineKeyboardButton("ü™µ –î–µ—Ä–µ–≤–æ —Ç–∞ –ø–∏–ª–æ–º–∞—Ç–µ—Ä—ñ–∞–ª–∏", callback_data="materials_wood")],
                [InlineKeyboardButton("üè† –ü–æ–∫—Ä—ñ–≤–µ–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏", callback_data="materials_roofing")],
                [InlineKeyboardButton("üé® –§–∞—Ä–±–∏ —Ç–∞ –æ–±—Ä–æ–±–∫–∞", callback_data="materials_paint")],
                [InlineKeyboardButton("üìã –Ü–Ω—à–µ", callback_data="materials_other")]
            ]
            
        elif data == "service_workers":
            user_data['service_type'] = "–ù–∞–π–º —Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤"
            user_responses[user_id]['stage'] = 'ask_workers_type'
            
            message = "üë∑‚Äç‚ôÇÔ∏è **–Ø–∫—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ?**"
            keyboard = [
                [InlineKeyboardButton("üß± –ú—É–ª—è—Ä–∏", callback_data="workers_masons")],
                [InlineKeyboardButton("üî® –ë—É–¥—ñ–≤–µ–ª—å–Ω–∏–∫–∏-—É–Ω—ñ–≤–µ—Ä—Å–∞–ª–∏", callback_data="workers_general")],
                [InlineKeyboardButton("‚ö° –ï–ª–µ–∫—Ç—Ä–∏–∫–∏", callback_data="workers_electricians")],
                [InlineKeyboardButton("üöø –°–∞–Ω—Ç–µ—Ö–Ω—ñ–∫–∏", callback_data="workers_plumbers")],
                [InlineKeyboardButton("üé® –ú–∞–ª—è—Ä–∏", callback_data="workers_painters")],
                [InlineKeyboardButton("üè† –ü–æ–∫—Ä—ñ–≤–µ–ª—å–Ω–∏–∫–∏", callback_data="workers_roofers")],
                [InlineKeyboardButton("ü™ü –ú–æ–Ω—Ç–∞–∂–Ω–∏–∫–∏ –≤—ñ–∫–æ–Ω", callback_data="workers_windows")],
                [InlineKeyboardButton("üìã –Ü–Ω—à—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏", callback_data="workers_other")]
            ]
            
        elif data == "service_tools":
            user_data['service_type'] = "–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —Ç–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"
            user_responses[user_id]['stage'] = 'ask_tools_type'
            
            message = "üîß **–Ø–∫–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ?**"
            keyboard = [
                [InlineKeyboardButton("üí™ –ï–ª–µ–∫—Ç—Ä–æ—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", callback_data="tools_power")],
                [InlineKeyboardButton("üî® –†—É—á–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", callback_data="tools_hand")],
                [InlineKeyboardButton("üèóÔ∏è –ë—É–¥—ñ–≤–µ–ª—å–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞", callback_data="tools_machinery")],
                [InlineKeyboardButton("üìè –í–∏–º—ñ—Ä—é–≤–∞–ª—å–Ω—ñ –ø—Ä–∏–ª–∞–¥–∏", callback_data="tools_measuring")],
                [InlineKeyboardButton("üöß –†–∏—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="tools_scaffolding")],
                [InlineKeyboardButton("‚ö° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏", callback_data="tools_generators")],
                [InlineKeyboardButton("üíß –ù–∞—Å–æ—Å–∏", callback_data="tools_pumps")],
                [InlineKeyboardButton("üìã –Ü–Ω—à–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è", callback_data="tools_other")]
            ]
            
        elif data == "service_construction":
            user_data['service_type'] = "–ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏"
            user_responses[user_id]['stage'] = 'ask_construction_type'
            
            message = "üè† **–Ø–∫—ñ —Ä–æ–±–æ—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏?**"
            keyboard = [
                [InlineKeyboardButton("üèóÔ∏è –§—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data="construction_foundation")],
                [InlineKeyboardButton("üß± –ö–ª–∞–¥–∫–∞ —Å—Ç—ñ–Ω", callback_data="construction_walls")],
                [InlineKeyboardButton("üè† –ü–æ–∫—Ä—ñ–≤–µ–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data="construction_roofing")],
                [InlineKeyboardButton("üé® –û–∑–¥–æ–±–ª—é–≤–∞–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data="construction_finishing")],
                [InlineKeyboardButton("‚ö° –ï–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂", callback_data="construction_electrical")],
                [InlineKeyboardButton("üöø –°–∞–Ω—Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data="construction_plumbing")],
                [InlineKeyboardButton("ü™ü –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ñ–∫–æ–Ω/–¥–≤–µ—Ä–µ–π", callback_data="construction_windows")],
                [InlineKeyboardButton("üìã –ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data="construction_complex")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

    async def handle_materials_selection(self, query, context, user_id, data):
        user_data = user_responses[user_id]['data']
        
        material_types = {
            "materials_cement": "–¶–µ–º–µ–Ω—Ç —Ç–∞ —Ä–æ–∑—á–∏–Ω–∏",
            "materials_bricks": "–¶–µ–≥–ª–∞ —Ç–∞ –±–ª–æ–∫–∏", 
            "materials_bulk": "–ü—ñ—Å–æ–∫, —â–µ–±—ñ–Ω—å, –≤—ñ–¥—Å—ñ–≤",
            "materials_metal": "–ê—Ä–º–∞—Ç—É—Ä–∞ —Ç–∞ –º–µ—Ç–∞–ª",
            "materials_wood": "–î–µ—Ä–µ–≤–æ —Ç–∞ –ø–∏–ª–æ–º–∞—Ç–µ—Ä—ñ–∞–ª–∏",
            "materials_roofing": "–ü–æ–∫—Ä—ñ–≤–µ–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏",
            "materials_paint": "–§–∞—Ä–±–∏ —Ç–∞ –æ–±—Ä–æ–±–∫–∞",
            "materials_other": "–Ü–Ω—à—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏"
        }
        
        user_data['specific_service'] = material_types.get(data, "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
        user_responses[user_id]['stage'] = 'ask_contact_name'
        
        await query.edit_message_text(
            f"‚úÖ –û–±—Ä–∞–Ω–æ: **{user_data['specific_service']}**\n\n"
            "üë§ **–Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?**\n"
            "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:",
            parse_mode='Markdown'
        )

    async def handle_workers_selection(self, query, context, user_id, data):
        user_data = user_responses[user_id]['data']
        
        worker_types = {
            "workers_masons": "–ú—É–ª—è—Ä–∏",
            "workers_general": "–ë—É–¥—ñ–≤–µ–ª—å–Ω–∏–∫–∏-—É–Ω–∏–≤–µ—Ä—Å–∞–ª–∏",
            "workers_electricians": "–ï–ª–µ–∫—Ç—Ä–∏–∫–∏",
            "workers_plumbers": "–°–∞–Ω—Ç–µ—Ö–Ω—ñ–∫–∏", 
            "workers_painters": "–ú–∞–ª—è—Ä–∏",
            "workers_roofers": "–ü–æ–∫—Ä—ñ–≤–µ–ª—å–Ω–∏–∫–∏",
            "workers_windows": "–ú–æ–Ω—Ç–∞–∂–Ω–∏–∫–∏ –≤—ñ–∫–æ–Ω",
            "workers_other": "–Ü–Ω—à—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏"
        }
        
        user_data['specific_service'] = worker_types.get(data, "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        user_responses[user_id]['stage'] = 'ask_workers_count'
        
        message = f"‚úÖ –û–±—Ä–∞–Ω–æ: **{user_data['specific_service']}**\n\nüë• **–°–∫—ñ–ª—å–∫–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ?**"
        keyboard = [
            [InlineKeyboardButton("1Ô∏è‚É£ 1 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç", callback_data="count_1")],
            [InlineKeyboardButton("2Ô∏è‚É£ 2 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏", callback_data="count_2")],
            [InlineKeyboardButton("3Ô∏è‚É£ 3 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏", callback_data="count_3")],
            [InlineKeyboardButton("üë• 4-6 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤", callback_data="count_4-6")],
            [InlineKeyboardButton("üë∑‚Äç‚ôÇÔ∏è –ë—ñ–ª—å—à–µ 6 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤", callback_data="count_6+")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

    async def handle_tools_selection(self, query, context, user_id, data):
        user_data = user_responses[user_id]['data']
        
        tool_types = {
            "tools_power": "–ï–ª–µ–∫—Ç—Ä–æ—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
            "tools_hand": "–†—É—á–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
            "tools_machinery": "–ë—É–¥—ñ–≤–µ–ª—å–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞",
            "tools_measuring": "–í–∏–º—ñ—Ä—é–≤–∞–ª—å–Ω—ñ –ø—Ä–∏–ª–∞–¥–∏",
            "tools_scaffolding": "–†–∏—à—Ç—É–≤–∞–Ω–Ω—è",
            "tools_generators": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏",
            "tools_pumps": "–ù–∞—Å–æ—Å–∏",
            "tools_other": "–Ü–Ω—à–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"
        }
        
        user_data['specific_service'] = tool_types.get(data, "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
        user_responses[user_id]['stage'] = 'ask_contact_name'
        
        await query.edit_message_text(
            f"‚úÖ –û–±—Ä–∞–Ω–æ: **{user_data['specific_service']}**\n\n"
            "üë§ **–Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?**\n"
            "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:",
            parse_mode='Markdown'
        )

    async def handle_construction_selection(self, query, context, user_id, data):
        user_data = user_responses[user_id]['data']
        
        construction_types = {
            "construction_foundation": "–§—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ñ —Ä–æ–±–æ—Ç–∏",
            "construction_walls": "–ö–ª–∞–¥–∫–∞ —Å—Ç—ñ–Ω",
            "construction_roofing": "–ü–æ–∫—Ä—ñ–≤–µ–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏", 
            "construction_finishing": "–û–∑–¥–æ–±–ª—é–≤–∞–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏",
            "construction_electrical": "–ï–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂",
            "construction_plumbing": "–°–∞–Ω—Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏",
            "construction_windows": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ñ–∫–æ–Ω/–¥–≤–µ—Ä–µ–π",
            "construction_complex": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ —Ä–æ–±–æ—Ç–∏"
        }
        
        user_data['specific_service'] = construction_types.get(data, "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
        user_responses[user_id]['stage'] = 'ask_contact_name'
        
        await query.edit_message_text(
            f"‚úÖ –û–±—Ä–∞–Ω–æ: **{user_data['specific_service']}**\n\n"
            "üë§ **–Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?**\n"
            "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:",
            parse_mode='Markdown'
        )

    async def handle_timeline_selection(self, query, context, user_id, data):
        user_data = user_responses[user_id]['data']
        
        timeline_options = {
            "timeline_urgent": "–¢–µ—Ä–º—ñ–Ω–æ–≤–æ (—Å—å–æ–≥–æ–¥–Ω—ñ)",
            "timeline_tomorrow": "–ó–∞–≤—Ç—Ä–∞",
            "timeline_week": "–ù–∞ —Ü—å–æ–º—É —Ç–∏–∂–Ω—ñ",
            "timeline_next_week": "–ù–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ç–∏–∂–Ω—ñ"
        }
        
        if data in timeline_options:
            user_data['timeline'] = timeline_options[data]
            await self.show_final_confirmation(query, context, user_id)
        elif data == "timeline_other":
            user_responses[user_id]['stage'] = 'ask_timeline_custom'
            await query.edit_message_text(
                "üìÖ **–í–∫–∞–∂—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥–∞—Ç—É:**\n"
                "üìù –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 25.09.2025 –∞–±–æ —á–µ—Ä–µ–∑ 2 —Ç–∏–∂–Ω—ñ"
            )

    async def handle_workers_count(self, query, context, user_id, data):
        if data.startswith("count_"):
            user_data = user_responses[user_id]['data']
            count_mapping = {
                "count_1": "1 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç",
                "count_2": "2 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏", 
                "count_3": "3 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏",
                "count_4-6": "4-6 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤",
                "count_6+": "–ë—ñ–ª—å—à–µ 6 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤"
            }
            
            user_data['workers_count'] = count_mapping.get(data, "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            user_responses[user_id]['stage'] = 'ask_contact_name'
            
            await query.edit_message_text(
                f"‚úÖ –û–±—Ä–∞–Ω–æ: **{user_data['specific_service']}**\n"
                f"üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å: **{user_data['workers_count']}**\n\n"
                "üë§ **–Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?**\n"
                "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:",
                parse_mode='Markdown'
            )

    async def show_final_confirmation(self, update_or_query, context, user_id):
        user_data = user_responses[user_id]['data']
        
        confirmation_message = (
            "üìã **–ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –ó–ê–Ø–í–ö–ò**\n\n"
            f"üèóÔ∏è **–ü–æ—Å–ª—É–≥–∞:** {user_data.get('service_type', '-')}\n"
            f"üì¶ **–î–µ—Ç–∞–ª—ñ:** {user_data.get('specific_service', '-')}\n"
        )
        
        if 'workers_count' in user_data:
            confirmation_message += f"üë• **–ö—ñ–ª—å–∫—ñ—Å—Ç—å:** {user_data['workers_count']}\n"
            
        confirmation_message += (
            f"üë§ **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞:** {user_data.get('contact_name', '-')}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {user_data.get('phone', '-')}\n"
            f"üìç **–ê–¥—Ä–µ—Å–∞ –æ–±'—î–∫—Ç–∞:** {user_data.get('object_address', '-')}\n"
            f"‚è∞ **–¢–µ—Ä–º—ñ–Ω:** {user_data.get('timeline', '-')}\n\n"
            "‚úÖ **–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞—è–≤–∫—É:**"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É", callback_data="confirm_order")],
            [InlineKeyboardButton("üìù –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–º—ñ—Ç–∫–∏", callback_data="add_info")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit_order")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update_or_query, 'edit_message_text'):
            await update_or_query.edit_message_text(
                confirmation_message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update_or_query.message.reply_text(
                confirmation_message,
                reply_markup=reply_markup, 
                parse_mode='Markdown'
            )

    async def ask_additional_info(self, query, context, user_id):
        user_responses[user_id]['stage'] = 'ask_additional_info'
        await query.edit_message_text(
            "üìù **–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:**\n\n"
            "–û–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –≤–∞—à—ñ –ø–æ—Ç—Ä–µ–±–∏:\n"
            "‚Ä¢ –û–±—Å—è–≥–∏ —Ä–æ–±—ñ—Ç\n"
            "‚Ä¢ –û—Å–æ–±–ª–∏–≤—ñ –≤–∏–º–æ–≥–∏\n"
            "‚Ä¢ –ë—é–¥–∂–µ—Ç\n"
            "‚Ä¢ –Ü–Ω—à—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è"
        )

    async def restart_order(self, query, context, user_id):
        user_responses[user_id] = {
            'stage': 'choose_service',
            'data': {},
            'timestamp': datetime.now()
        }
        
        message = (
            "üîÑ **–ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É**\n\n"
            "üèóÔ∏è **–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?**"
        )
        
        keyboard = [
            [InlineKeyboardButton("üß± –ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏", callback_data="service_materials")],
            [InlineKeyboardButton("üë∑‚Äç‚ôÇÔ∏è –ù–∞–π–º —Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤", callback_data="service_workers")],
            [InlineKeyboardButton("üîß –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —Ç–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è", callback_data="service_tools")],
            [InlineKeyboardButton("üè† –ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data="service_construction")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

    async def process_final_order(self, query, context, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        try:
            user_data = user_responses[user_id]['data']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            await self.send_order_to_managers(query, context, user_id, user_data)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            await self.show_success_message(query, context)
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            del user_responses[user_id]
            
            logger.info(f"Successfully processed order for user {user_id}")
            
        except Exception as e:
            logger.error(f"Error processing final order: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º.")

    async def send_order_to_managers(self, query, context, user_id, user_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
        try:
            message = (
                "üèóÔ∏è **–ù–û–í–ê –ó–ê–Ø–í–ö–ê - –î–û–ë–†–û–ë–£–î**\n\n"
                f"üì¶ **–ü–æ—Å–ª—É–≥–∞:** {user_data.get('service_type', '-')}\n"
                f"üîß **–î–µ—Ç–∞–ª—ñ:** {user_data.get('specific_service', '-')}\n"
            )
            
            if 'workers_count' in user_data:
                message += f"üë• **–ö—ñ–ª—å–∫—ñ—Å—Ç—å:** {user_data['workers_count']}\n"
                
            message += (
                f"üë§ **–ö–ª—ñ—î–Ω—Ç:** {user_data.get('contact_name', '-')}\n"
                f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {user_data.get('phone', '-')}\n"
                f"üìç **–ê–¥—Ä–µ—Å–∞:** {user_data.get('object_address', '-')}\n"
                f"‚è∞ **–¢–µ—Ä–º—ñ–Ω:** {user_data.get('timeline', '-')}\n"
            )
            
            if 'additional_info' in user_data:
                message += f"üìù **–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:** {user_data['additional_info']}\n"
                
            message += (
                f"\nüìÖ **–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏:** {datetime.now().strftime('%d.%m.%Y –æ %H:%M')}\n"
                f"üÜî **User ID:** {user_id}\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                "üèóÔ∏è **–ö–æ–º–ø–∞–Ω—ñ—è –î–û–ë–†–û–ë–£–î**"
            )

            await context.bot.send_message(CHAT_ID, message, parse_mode='Markdown')
            logger.info(f"Order sent to managers for user {user_id}")
        except Exception as e:
            logger.error(f"Error sending order to managers: {e}")
            raise

    async def show_success_message(self, query, context):
        """–ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏"""
        try:
            success_message = (
                "üéâ **–î–Ø–ö–£–Ñ–ú–û –ó–ê –ó–ê–Ø–í–ö–£!**\n\n"
                "‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞**\n\n"
                "‚è∞ **–©–æ –¥–∞–ª—ñ?**\n"
                "üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –ø—Ä–æ—Ç—è–≥–æ–º 15-30 —Ö–≤–∏–ª–∏–Ω\n"
                "üìã –û–±–≥–æ–≤–æ—Ä–∏–º–æ –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ —Ç–∞ —É–∑–≥–æ–¥–∏–º–æ —É–º–æ–≤–∏\n"
                "üí∞ –†–æ–∑—Ä–∞—Ö—É—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞ —Å—Ç—Ä–æ–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è\n\n"
                "üèóÔ∏è **–ö–æ–º–ø–∞–Ω—ñ—è –î–û–ë–†–û–ë–£–î**\n"
                "üî• –ë—É–¥—É—î–º–æ —è–∫—ñ—Å–Ω–æ, —à–≤–∏–¥–∫–æ, –Ω–∞–¥—ñ–π–Ω–æ!\n\n"
                "üì± **–ö–æ–Ω—Ç–∞–∫—Ç–∏ –¥–ª—è –∑–≤'—è–∑–∫—É:**\n"
                "‚òéÔ∏è +38 (067) 123-45-67\n"
                "üìß info@dobrobud.ua\n\n"
                "üí¨ –©–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É - /start"
            )
            
            await query.edit_message_text(success_message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error showing success message: {e}")
            raise

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        data = query.data
        
        logger.info(f"CALLBACK - User {user_id} clicked: {data}")
        
        try:
            await query.answer()
        except Exception as e:
            logger.error(f"Error answering callback: {e}")
            return

        if user_id not in user_responses:
            try:
                await query.edit_message_text("üîÑ –°–µ—Å—ñ—è –≤—Ç—Ä–∞—á–µ–Ω–∞. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.")
            except Exception as e:
                logger.error(f"Error editing message: {e}")
            return

        try:
            if data.startswith("service_"):
                await self.handle_service_selection(query, context, user_id, data)
            elif data.startswith("materials_"):
                await self.handle_materials_selection(query, context, user_id, data)
            elif data.startswith("workers_"):
                await self.handle_workers_selection(query, context, user_id, data)
            elif data.startswith("tools_"):
                await self.handle_tools_selection(query, context, user_id, data)
            elif data.startswith("construction_"):
                await self.handle_construction_selection(query, context, user_id, data)
            elif data.startswith("count_"):
                await self.handle_workers_count(query, context, user_id, data)
            elif data.startswith("timeline_"):
                await self.handle_timeline_selection(query, context, user_id, data)
            elif data == "confirm_order":
                await self.process_final_order(query, context, user_id)
            elif data == "edit_order":
                await self.restart_order(query, context, user_id)
            elif data == "add_info":
                await self.ask_additional_info(query, context, user_id)

        except Exception as e:
            logger.error(f"Error processing callback: {e}")
            try:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ /start")
            except:
                pass

    async def run_webhook(self):
        """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.application.initialize()
            await self.application.start()
            
            # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = web.Application()

            async def handle_post(request):
                try:
                    data = await request.json()
                    logger.info(f"Webhook received update: {data.get('update_id', 'unknown')}")
                    
                    update = Update.de_json(data, self.application.bot)
                    if update is None:
                        logger.error("Failed to parse update from JSON")
                        return web.Response(text="ERROR", status=400)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    await self.application.process_update(update)
                    return web.Response(text="OK")
                    
                except Exception as e:
                    logger.error(f"Webhook processing error: {e}")
                    return web.Response(text="ERROR", status=500)

            async def handle_get(request):
                return web.Response(text="Dobrobud Bot –ø—Ä–∞—Ü—é—î –Ω–∞ Render")

            async def handle_health(request):
                return web.Response(text="OK", status=200)

            async def handle_status(request):
                status_data = {
                    "status": "running",
                    "timestamp": datetime.now().isoformat(),
                    "service": "Dobrobud Construction Bot",
                    "platform": "Render",
                    "active_orders": len(user_responses)
                }
                return web.json_response(status_data)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
            app.router.add_post('/webhook', handle_post)
            app.router.add_get('/webhook', handle_get)
            app.router.add_get('/health', handle_health)
            app.router.add_get('/status', handle_status)
            app.router.add_get('/', handle_health)

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, '0.0.0.0', PORT)
            await site.start()
            logger.info(f"Web server started on port {PORT}")

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
            webhook_url = f"{WEBHOOK_URL}/webhook"
            
            try:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
                await self.application.bot.delete_webhook(drop_pending_updates=True)
                logger.info("Previous webhook deleted")
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                await asyncio.sleep(2)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
                webhook_set = await self.application.bot.set_webhook(
                    url=webhook_url,
                    drop_pending_updates=True,
                    max_connections=20,
                    allowed_updates=["message", "callback_query"]
                )
                
                if webhook_set:
                    logger.info(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
                webhook_info = await self.application.bot.get_webhook_info()
                logger.info(f"Webhook info: URL={webhook_info.url}, Pending={webhook_info.pending_update_count}")
                
            except Exception as e:
                logger.error(f"Webhook setup error: {e}")
                raise
            
            logger.info("üöÄ Dobrobud Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            try:
                while True:
                    await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                    logger.info("Bot heartbeat - Dobrobud on Render")
            except KeyboardInterrupt:
                logger.info("Bot stopping by user...")
            except Exception as e:
                logger.error(f"Bot runtime error: {e}")
            finally:
                logger.info("Stopping bot...")
                await self.application.stop()
                await self.application.shutdown()

        except Exception as e:
            logger.error(f"Critical startup error: {e}")
            raise

async def main():
    logger.info("üöÄ Starting Dobrobud Construction Bot on Render...")
    try:
        bot = DobrobudBot()
        await bot.run_webhook()
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        try:
            bot = DobrobudBot()
            await bot.run_webhook()
        except Exception as retry_error:
            logger.error(f"Retry failed: {retry_error}")
            raise

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Critical error: {e}")
        exit(1)
