import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler,
    MessageHandler, CallbackQueryHandler,
    filters, ContextTypes
)
import asyncio
from datetime import datetime
from aiohttp import web

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8390533970:AAH7dcxqGqryY7F7UxQYlit_2z1fdcc0mAk"
CHAT_ID = -4887312460
PORT = int(os.getenv('PORT', 8000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://dobrobud.onrender.com')

user_responses = {}

class DobrobudBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("webhook_info", self.webhook_info_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_responses[user_id] = {
            'stage': 'ask_service',
            'data': {},
            'timestamp': datetime.now()
        }
        
        welcome_message = (
            "üèóÔ∏è –í—ñ—Ç–∞—î–º–æ –≤ –∫–æ–º–ø–∞–Ω—ñ—ó –î–û–ë–†–û–ë–£–î!\n\n"
            "üî® –ú–∏ –Ω–∞–¥–∞—î–º–æ —è–∫—ñ—Å–Ω—ñ –±—É–¥—ñ–≤–µ–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏\n"
            "üë∑‚Äç‚ôÇÔ∏è –î–æ—Å–≤—ñ–¥—á–µ–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏ —Ç–∞ —Å—É—á–∞—Å–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è\n"
            "‚ö° –®–≤–∏–¥–∫–æ, —è–∫—ñ—Å–Ω–æ, –Ω–∞–¥—ñ–π–Ω–æ!\n\n"
            "üìã –©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?"
        )
        
        keyboard = [
            [InlineKeyboardButton("üß± –ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏", callback_data="service_materials")],
            [InlineKeyboardButton("üë∑‚Äç‚ôÇÔ∏è –ù–∞–π–º —Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤", callback_data="service_workers")],
            [InlineKeyboardButton("üîß –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —Ç–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è", callback_data="service_tools")],
            [InlineKeyboardButton("üè† –ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data="service_construction")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)

    async def webhook_info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            webhook_info = await context.bot.get_webhook_info()
            info_text = (
                f"üîó **Webhook Info:**\n"
                f"URL: `{webhook_info.url}`\n"
                f"Has Custom Certificate: {webhook_info.has_custom_certificate}\n"
                f"Pending Update Count: {webhook_info.pending_update_count}\n"
                f"Last Error Date: {webhook_info.last_error_date}\n"
                f"Last Error Message: {webhook_info.last_error_message}\n"
                f"Max Connections: {webhook_info.max_connections}"
            )
            await update.message.reply_text(info_text, parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text(f"Error getting webhook info: {e}")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üìã –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start\n"
            "üèóÔ∏è –ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –æ–±–∏—Ä–∞–π—Ç–µ –≤–∞—Ä—ñ–∞–Ω—Ç–∏.\n"
            "üìû –ü–æ –∫–Ω–æ–ø–∫–∞—Ö –æ–±–∏—Ä–∞–π—Ç–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ—Å–ª—É–≥–∏."
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        logger.info(f"Processing message from user {user_id}: {text}")

        if user_id not in user_responses:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏.")
            return

        stage = user_responses[user_id]['stage']
        data = user_responses[user_id]['data']

        if stage == 'ask_name':
            data['name'] = text
            user_responses[user_id]['stage'] = 'ask_phone'
            await update.message.reply_text("üìû –í–∫–∞–∂—ñ—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

        elif stage == 'ask_phone':
            data['phone'] = text
            user_responses[user_id]['stage'] = 'ask_address'
            await update.message.reply_text("üìç –í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –æ–±'—î–∫—Ç–∞:")

        elif stage == 'ask_address':
            data['address'] = text
            user_responses[user_id]['stage'] = 'ask_timing'
            
            timing_message = "‚è∞ –ù–∞ –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ?"
            keyboard = [
                [InlineKeyboardButton("üî• –¢–µ—Ä–º—ñ–Ω–æ–≤–æ (—Å—å–æ–≥–æ–¥–Ω—ñ)", callback_data="timing_urgent")],
                [InlineKeyboardButton("‚ö° –ó–∞–≤—Ç—Ä–∞", callback_data="timing_tomorrow")],
                [InlineKeyboardButton("üìÖ –ù–∞ —Ü—å–æ–º—É —Ç–∏–∂–Ω—ñ", callback_data="timing_week")],
                [InlineKeyboardButton("üìÜ –ù–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ç–∏–∂–Ω—ñ", callback_data="timing_next_week")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(timing_message, reply_markup=reply_markup)

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        data = query.data
        
        logger.info(f"CALLBACK QUERY - Button clicked by user {user_id}: {data}")
        
        try:
            await query.answer()
            logger.info(f"CALLBACK QUERY - Successfully answered callback for user {user_id}")
        except Exception as e:
            logger.error(f"CALLBACK QUERY - Error answering callback: {e}")
            return

        if user_id not in user_responses:
            logger.warning(f"CALLBACK QUERY - User {user_id} not found in user_responses")
            try:
                await query.edit_message_text("–°–µ—Å—ñ—è –≤—Ç—Ä–∞—á–µ–Ω–∞. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ /start.")
            except Exception as e:
                logger.error(f"CALLBACK QUERY - Error editing message: {e}")
            return

        if data.startswith("service_"):
            await self.handle_service_selection(query, user_id, data)
        elif data.startswith("subservice_"):
            await self.handle_subservice_selection(query, user_id, data)
        elif data.startswith("count_"):
            await self.handle_count_selection(query, user_id, data)
        elif data.startswith("timing_"):
            await self.handle_timing_selection(query, user_id, data)
        elif data == "confirm_order":
            await self.confirm_final_order(query, context, user_id)

    async def handle_service_selection(self, query, user_id, service_data):
        user_responses[user_id]['data']['service'] = service_data
        
        if service_data == "service_materials":
            user_responses[user_id]['stage'] = 'ask_subservice'
            keyboard = [
                [InlineKeyboardButton("üß± –¶–µ–º–µ–Ω—Ç —Ç–∞ —Ä–æ–∑—á–∏–Ω–∏", callback_data="subservice_cement")],
                [InlineKeyboardButton("üè† –¶–µ–≥–ª–∞ —Ç–∞ –±–ª–æ–∫–∏", callback_data="subservice_bricks")],
                [InlineKeyboardButton("ü™® –ü—ñ—Å–æ–∫, —â–µ–±—ñ–Ω—å", callback_data="subservice_sand")],
                [InlineKeyboardButton("üî© –ê—Ä–º–∞—Ç—É—Ä–∞, –º–µ—Ç–∞–ª", callback_data="subservice_metal")],
                [InlineKeyboardButton("ü™µ –î–µ—Ä–µ–≤–æ, –ø–∏–ª–æ–º–∞—Ç–µ—Ä—ñ–∞–ª–∏", callback_data="subservice_wood")],
                [InlineKeyboardButton("üìã –Ü–Ω—à–µ", callback_data="subservice_other_materials")]
            ]
            message = "üß± –Ø–∫—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ?"
            
        elif service_data == "service_workers":
            user_responses[user_id]['stage'] = 'ask_subservice'
            keyboard = [
                [InlineKeyboardButton("üß± –ú—É–ª—è—Ä–∏", callback_data="subservice_masons")],
                [InlineKeyboardButton("üî® –ë—É–¥—ñ–≤–µ–ª—å–Ω–∏–∫–∏-—É–Ω—ñ–≤–µ—Ä—Å–∞–ª–∏", callback_data="subservice_builders")],
                [InlineKeyboardButton("‚ö° –ï–ª–µ–∫—Ç—Ä–∏–∫–∏", callback_data="subservice_electricians")],
                [InlineKeyboardButton("üöø –°–∞–Ω—Ç–µ—Ö–Ω—ñ–∫–∏", callback_data="subservice_plumbers")],
                [InlineKeyboardButton("üé® –ú–∞–ª—è—Ä–∏", callback_data="subservice_painters")],
                [InlineKeyboardButton("üìã –Ü–Ω—à—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏", callback_data="subservice_other_workers")]
            ]
            message = "üë∑‚Äç‚ôÇÔ∏è –Ø–∫—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ?"
            
        elif service_data == "service_tools":
            user_responses[user_id]['stage'] = 'ask_subservice'
            keyboard = [
                [InlineKeyboardButton("üí™ –ï–ª–µ–∫—Ç—Ä–æ—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", callback_data="subservice_power_tools")],
                [InlineKeyboardButton("üî® –†—É—á–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", callback_data="subservice_hand_tools")],
                [InlineKeyboardButton("üèóÔ∏è –ë—É–¥—ñ–≤–µ–ª—å–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞", callback_data="subservice_machinery")],
                [InlineKeyboardButton("üöß –†–∏—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="subservice_scaffolding")],
                [InlineKeyboardButton("üìã –Ü–Ω—à–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è", callback_data="subservice_other_tools")]
            ]
            message = "üîß –Ø–∫–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ?"
            
        elif service_data == "service_construction":
            user_responses[user_id]['stage'] = 'ask_subservice'
            keyboard = [
                [InlineKeyboardButton("üèóÔ∏è –§—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data="subservice_foundation")],
                [InlineKeyboardButton("üß± –ö–ª–∞–¥–∫–∞ —Å—Ç—ñ–Ω", callback_data="subservice_walls")],
                [InlineKeyboardButton("üè† –ü–æ–∫—Ä—ñ–≤–µ–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data="subservice_roofing")],
                [InlineKeyboardButton("üé® –û–∑–¥–æ–±–ª—é–≤–∞–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data="subservice_finishing")],
                [InlineKeyboardButton("‚ö° –ï–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂", callback_data="subservice_electrical")],
                [InlineKeyboardButton("üìã –ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data="subservice_complex")]
            ]
            message = "üè† –Ø–∫—ñ —Ä–æ–±–æ—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏?"
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def handle_subservice_selection(self, query, user_id, subservice_data):
        user_responses[user_id]['data']['subservice'] = subservice_data
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–±–æ—á–∏—Ö, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if user_responses[user_id]['data']['service'] == "service_workers":
            user_responses[user_id]['stage'] = 'ask_count'
            message = "üë• –°–∫—ñ–ª—å–∫–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ?"
            keyboard = [
                [InlineKeyboardButton("1Ô∏è‚É£ 1 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç", callback_data="count_1")],
                [InlineKeyboardButton("2Ô∏è‚É£ 2 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏", callback_data="count_2")],
                [InlineKeyboardButton("3Ô∏è‚É£ 3 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏", callback_data="count_3")],
                [InlineKeyboardButton("üë• 4-6 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤", callback_data="count_4-6")],
                [InlineKeyboardButton("üë∑‚Äç‚ôÇÔ∏è –ë—ñ–ª—å—à–µ 6", callback_data="count_6+")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∏–º–µ–Ω–∏
            user_responses[user_id]['stage'] = 'ask_name'
            await query.edit_message_text("üë§ –ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ —ñ–º'—è:")

    async def handle_count_selection(self, query, user_id, count_data):
        user_responses[user_id]['data']['count'] = count_data
        user_responses[user_id]['stage'] = 'ask_name'
        await query.edit_message_text("üë§ –ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ —ñ–º'—è:")

    async def handle_timing_selection(self, query, user_id, timing_data):
        user_responses[user_id]['data']['timing'] = timing_data
        await self.show_confirmation(query, user_id)

    async def show_confirmation(self, query, user_id):
        data = user_responses[user_id]['data']
        
        # –ù–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        service_names = {
            'service_materials': '–ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏',
            'service_workers': '–ù–∞–π–º —Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤', 
            'service_tools': '–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —Ç–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
            'service_construction': '–ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏'
        }
        
        # –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ä–æ–∫–æ–≤
        timing_names = {
            'timing_urgent': '–¢–µ—Ä–º—ñ–Ω–æ–≤–æ (—Å—å–æ–≥–æ–¥–Ω—ñ)',
            'timing_tomorrow': '–ó–∞–≤—Ç—Ä–∞',
            'timing_week': '–ù–∞ —Ü—å–æ–º—É —Ç–∏–∂–Ω—ñ',
            'timing_next_week': '–ù–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ç–∏–∂–Ω—ñ'
        }
        
        confirmation_message = (
            "‚úÖ **–ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –ó–ê–Ø–í–ö–ò**\n\n"
            f"üîß **–ü–æ—Å–ª—É–≥–∞:** {service_names.get(data.get('service'), '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üë§ **–Ü–º'—è:** {data.get('name', '-')}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {data.get('phone', '-')}\n"
            f"üìç **–ê–¥—Ä–µ—Å–∞ –æ–±'—î–∫—Ç–∞:** {data.get('address', '-')}\n"
            f"‚è∞ **–¢–µ—Ä–º—ñ–Ω:** {timing_names.get(data.get('timing'), '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        )
        
        if 'count' in data:
            count_names = {
                'count_1': '1 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç',
                'count_2': '2 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏',
                'count_3': '3 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏',
                'count_4-6': '4-6 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤',
                'count_6+': '–ë—ñ–ª—å—à–µ 6 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤'
            }
            confirmation_message += f"üë• **–ö—ñ–ª—å–∫—ñ—Å—Ç—å:** {count_names.get(data['count'], '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        
        confirmation_message += "\n–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É:"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é –∑–∞—è–≤–∫—É", callback_data="confirm_order")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            confirmation_message, 
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def confirm_final_order(self, query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        logger.info(f"CALLBACK QUERY - User {user_id} confirming order")
        
        try:
            await self.send_order_to_chat(query, context, user_id)
            await self.show_success_message(query, context)
            del user_responses[user_id]
            logger.info(f"CALLBACK QUERY - Successfully processed order for user {user_id}")
            
        except Exception as e:
            logger.error(f"CALLBACK QUERY - Error processing order: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    async def send_order_to_chat(self, query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        data = user_responses[user_id]['data']
        
        service_names = {
            'service_materials': '–ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏',
            'service_workers': '–ù–∞–π–º —Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤',
            'service_tools': '–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —Ç–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è', 
            'service_construction': '–ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏'
        }
        
        timing_names = {
            'timing_urgent': '–¢–µ—Ä–º—ñ–Ω–æ–≤–æ (—Å—å–æ–≥–æ–¥–Ω—ñ)',
            'timing_tomorrow': '–ó–∞–≤—Ç—Ä–∞',
            'timing_week': '–ù–∞ —Ü—å–æ–º—É —Ç–∏–∂–Ω—ñ',
            'timing_next_week': '–ù–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ç–∏–∂–Ω—ñ'
        }
        
        message = (
            "üèóÔ∏è **–ù–û–í–ê –ó–ê–Ø–í–ö–ê - –î–û–ë–†–û–ë–£–î**\n\n"
            f"üîß **–ü–æ—Å–ª—É–≥–∞:** {service_names.get(data.get('service'), '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üë§ **–ö–ª—ñ—î–Ω—Ç:** {data.get('name', '-')}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {data.get('phone', '-')}\n"
            f"üìç **–ê–¥—Ä–µ—Å–∞:** {data.get('address', '-')}\n"
            f"‚è∞ **–¢–µ—Ä–º—ñ–Ω:** {timing_names.get(data.get('timing'), '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        )
        
        if 'count' in data:
            count_names = {
                'count_1': '1 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç',
                'count_2': '2 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏', 
                'count_3': '3 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏',
                'count_4-6': '4-6 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤',
                'count_6+': '–ë—ñ–ª—å—à–µ 6 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤'
            }
            message += f"üë• **–ö—ñ–ª—å–∫—ñ—Å—Ç—å:** {count_names.get(data['count'], '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            
        message += (
            f"\nüìÖ **–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏:** {datetime.now().strftime('%d.%m.%Y –æ %H:%M')}\n"
            f"üÜî **User ID:** {user_id}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "üèóÔ∏è **–ö–æ–º–ø–∞–Ω—ñ—è –î–û–ë–†–û–ë–£–î**"
        )

        await context.bot.send_message(CHAT_ID, message, parse_mode='Markdown')

    async def show_success_message(self, query, context):
        success_message = (
            "üéâ **–î–Ø–ö–£–Ñ–ú–û –ó–ê –ó–ê–Ø–í–ö–£!**\n\n"
            "‚úÖ **–ö–æ–º–ø–∞–Ω—ñ—è –î–û–ë–†–û–ë–£–î –ø—Ä–∏–π–Ω—è–ª–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É**\n\n"
            "‚è∞ **–©–æ –¥–∞–ª—ñ?**\n"
            "üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –ø—Ä–æ—Ç—è–≥–æ–º 15-30 —Ö–≤–∏–ª–∏–Ω\n"
            "üìã –û–±–≥–æ–≤–æ—Ä–∏–º–æ –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ —Ç–∞ —É–∑–≥–æ–¥–∏–º–æ —É–º–æ–≤–∏\n"
            "üí∞ –†–æ–∑—Ä–∞—Ö—É—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞ —Å—Ç—Ä–æ–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è\n\n"
            "üèóÔ∏è **–ö–æ–º–ø–∞–Ω—ñ—è –î–û–ë–†–û–ë–£–î**\n"
            "üî• –ë—É–¥—É—î–º–æ —è–∫—ñ—Å–Ω–æ, —à–≤–∏–¥–∫–æ, –Ω–∞–¥—ñ–π–Ω–æ!\n\n"
            "üì± **–ö–æ–Ω—Ç–∞–∫—Ç–∏:**\n"
            "‚òéÔ∏è +38 (067) 123-45-67\n"
            "üìß info@dobrobud.ua\n\n"
            "üí¨ –©–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É - /start"
        )
        
        await query.edit_message_text(success_message, parse_mode='Markdown')

    async def run_webhook(self):
        await self.application.initialize()
        await self.application.start()
        
        app = web.Application()

        async def handle_post(request):
            try:
                data = await request.json()
                logger.info(f"Received webhook data: {data}")
                
                if 'callback_query' in data:
                    logger.info(f"WEBHOOK - Callback query detected: {data['callback_query']}")
                elif 'message' in data:
                    logger.info(f"WEBHOOK - Regular message detected: {data['message']}")
                else:
                    logger.warning(f"WEBHOOK - Unknown update type: {list(data.keys())}")
                
                update = Update.de_json(data, self.application.bot)
                
                if update is None:
                    logger.error("WEBHOOK - Failed to parse update from JSON")
                    return web.Response(text="ERROR: Failed to parse update", status=400)
                
                logger.info(f"WEBHOOK - Successfully parsed update: {update.update_id}")
                
                await self.application.process_update(update)
                logger.info(f"WEBHOOK - Successfully processed update: {update.update_id}")
                
                return web.Response(text="OK")
            except Exception as e:
                logger.error(f"WEBHOOK - Error processing webhook: {e}", exc_info=True)
                return web.Response(text="ERROR", status=500)

        async def handle_get(request):
            return web.Response(text="Dobrobud Bot –ø—Ä–∞—Ü—é—î")

        async def handle_health(request):
            return web.Response(text="OK")

        async def handle_uptime(request):
            uptime_data = {
                "status": "ok",
                "timestamp": datetime.now().isoformat(),
                "service": "Dobrobud Construction Bot"
            }
            return web.json_response(uptime_data)

        app.router.add_post('/webhook', handle_post)
        app.router.add_get('/webhook', handle_get)
        app.router.add_get('/health', handle_health)
        app.router.add_get('/uptime', handle_uptime)
        app.router.add_get('/', handle_health)

        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', PORT)
        await site.start()

        webhook_url = f"{WEBHOOK_URL}/webhook"
        
        try:
            await self.application.bot.delete_webhook(drop_pending_updates=True)
            logger.info("Deleted existing webhook")
            
            await asyncio.sleep(2)
            
            result = await self.application.bot.set_webhook(
                url=webhook_url,
                drop_pending_updates=True,
                max_connections=40,
                allowed_updates=["message", "callback_query"]
            )
            logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}, result: {result}")
            
            webhook_info = await self.application.bot.get_webhook_info()
            logger.info(f"Webhook verification: {webhook_info}")
            
        except Exception as e:
            logger.error(f"Error setting webhook: {e}")
            raise
        
        logger.info("Dobrobud Bot –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ webhook")

        try:
            while True:
                await asyncio.sleep(3600)
        except KeyboardInterrupt:
            logger.info("Bot stopped")
        finally:
            await self.application.stop()
            await self.application.shutdown()

async def main():
    bot = DobrobudBot()
    await bot.run_webhook()

if __name__ == '__main__':
    asyncio.run(main())
