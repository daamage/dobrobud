import os
import logging
import asyncio
import json
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8390533970:AAH7dcxqGqryY7F7UxQYlit_2z1fdcc0mAk"
CHAT_ID = -4887312460
PORT = int(os.getenv('PORT', 8000))

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

class DobrobudBot:
    def __init__(self):
        self.app = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("help", self.help))
        self.app.add_handler(CallbackQueryHandler(self.button_click))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_data[user_id] = {'stage': 'start', 'data': {}}
        
        text = (
            "üèóÔ∏è **–î–û–ë–†–û–ë–£–î** - –í–∞—à –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä!\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üß± –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏", callback_data="materials")],
            [InlineKeyboardButton("üë∑‚Äç‚ôÇÔ∏è –†–æ–±—ñ—Ç–Ω–∏–∫–∏", callback_data="workers")],
            [InlineKeyboardButton("üîß –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", callback_data="tools")],
            [InlineKeyboardButton("üè† –ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data="construction")]
        ]
        
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = (
            "üìã **–ö–æ–º–∞–Ω–¥–∏:**\n"
            "/start - –ü–æ—á–∞—Ç–∏ –∑–∞—è–≤–∫—É\n"
            "/help - –î–æ–ø–æ–º–æ–≥–∞\n\n"
            "üèóÔ∏è –ö–æ–º–ø–∞–Ω—ñ—è –î–û–ë–†–û–ë–£–î\n"
            "üìû +38 (067) 123-45-67"
        )
        await update.message.reply_text(text, parse_mode='Markdown')

    async def button_click(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if user_id not in user_data:
            await query.edit_message_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É")
            return

        try:
            if data in ['materials', 'workers', 'tools', 'construction']:
                await self.handle_service_choice(query, user_id, data)
            elif data.startswith('sub_'):
                await self.handle_sub_choice(query, user_id, data)
            elif data.startswith('count_'):
                await self.handle_count_choice(query, user_id, data)
            elif data.startswith('time_'):
                await self.handle_time_choice(query, user_id, data)
            elif data == 'confirm':
                await self.confirm_order(query, user_id, context)
        except Exception as e:
            logger.error(f"Button error: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /start")

    async def handle_service_choice(self, query, user_id, service):
        user_data[user_id]['data']['service'] = service
        user_data[user_id]['stage'] = 'sub_service'
        
        services = {
            'materials': {
                'title': 'üß± –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏',
                'options': [
                    ('sub_cement', '–¶–µ–º–µ–Ω—Ç, —Ä–æ–∑—á–∏–Ω–∏'),
                    ('sub_brick', '–¶–µ–≥–ª–∞, –±–ª–æ–∫–∏'),
                    ('sub_sand', '–ü—ñ—Å–æ–∫, —â–µ–±—ñ–Ω—å'),
                    ('sub_metal', '–ê—Ä–º–∞—Ç—É—Ä–∞, –º–µ—Ç–∞–ª'),
                    ('sub_wood', '–î–µ—Ä–µ–≤–æ'),
                    ('sub_other_mat', '–Ü–Ω—à–µ')
                ]
            },
            'workers': {
                'title': 'üë∑‚Äç‚ôÇÔ∏è –†–æ–±—ñ—Ç–Ω–∏–∫–∏',
                'options': [
                    ('sub_mason', '–ú—É–ª—è—Ä–∏'),
                    ('sub_builder', '–ë—É–¥—ñ–≤–µ–ª—å–Ω–∏–∫–∏'),
                    ('sub_electric', '–ï–ª–µ–∫—Ç—Ä–∏–∫–∏'),
                    ('sub_plumber', '–°–∞–Ω—Ç–µ—Ö–Ω—ñ–∫–∏'),
                    ('sub_painter', '–ú–∞–ª—è—Ä–∏'),
                    ('sub_other_work', '–Ü–Ω—à—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏')
                ]
            },
            'tools': {
                'title': 'üîß –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏',
                'options': [
                    ('sub_power', '–ï–ª–µ–∫—Ç—Ä–æ—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'),
                    ('sub_hand', '–†—É—á–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'),
                    ('sub_machine', '–¢–µ—Ö–Ω—ñ–∫–∞'),
                    ('sub_scaffold', '–†–∏—à—Ç—É–≤–∞–Ω–Ω—è'),
                    ('sub_other_tool', '–Ü–Ω—à–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è')
                ]
            },
            'construction': {
                'title': 'üè† –ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏',
                'options': [
                    ('sub_foundation', '–§—É–Ω–¥–∞–º–µ–Ω—Ç'),
                    ('sub_walls', '–°—Ç—ñ–Ω–∏'),
                    ('sub_roof', '–ü–æ–∫—Ä—ñ–≤–ª—è'),
                    ('sub_finish', '–û–∑–¥–æ–±–ª–µ–Ω–Ω—è'),
                    ('sub_electric_work', '–ï–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂'),
                    ('sub_other_constr', '–Ü–Ω—à—ñ —Ä–æ–±–æ—Ç–∏')
                ]
            }
        }
        
        service_info = services[service]
        text = f"–û–±—Ä–∞–Ω–æ: {service_info['title']}\n\n–û–±–µ—Ä—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ:"
        
        keyboard = [[InlineKeyboardButton(name, callback_data=code)] for code, name in service_info['options']]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    async def handle_sub_choice(self, query, user_id, sub_service):
        user_data[user_id]['data']['sub_service'] = sub_service
        
        if user_data[user_id]['data']['service'] == 'workers':
            user_data[user_id]['stage'] = 'count'
            text = "–°–∫—ñ–ª—å–∫–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ?"
            keyboard = [
                [InlineKeyboardButton("1 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç", callback_data="count_1")],
                [InlineKeyboardButton("2-3 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏", callback_data="count_2-3")],
                [InlineKeyboardButton("4-6 —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤", callback_data="count_4-6")],
                [InlineKeyboardButton("–ë—ñ–ª—å—à–µ 6", callback_data="count_6+")]
            ]
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await self.ask_contact_info(query, user_id)

    async def handle_count_choice(self, query, user_id, count):
        user_data[user_id]['data']['count'] = count.replace('count_', '')
        await self.ask_contact_info(query, user_id)

    async def ask_contact_info(self, query, user_id):
        user_data[user_id]['stage'] = 'name'
        await query.edit_message_text("üë§ –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        if user_id not in user_data:
            await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É")
            return

        stage = user_data[user_id]['stage']
        
        try:
            if stage == 'name':
                user_data[user_id]['data']['name'] = text
                user_data[user_id]['stage'] = 'phone'
                await update.message.reply_text("üìû –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
                
            elif stage == 'phone':
                user_data[user_id]['data']['phone'] = text
                user_data[user_id]['stage'] = 'address'
                await update.message.reply_text("üìç –ê–¥—Ä–µ—Å–∞ –æ–±'—î–∫—Ç–∞:")
                
            elif stage == 'address':
                user_data[user_id]['data']['address'] = text
                user_data[user_id]['stage'] = 'time'
                
                text = "‚è∞ –ö–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ?"
                keyboard = [
                    [InlineKeyboardButton("üî• –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="time_today")],
                    [InlineKeyboardButton("‚ö° –ó–∞–≤—Ç—Ä–∞", callback_data="time_tomorrow")],
                    [InlineKeyboardButton("üìÖ –¶–µ–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="time_week")],
                    [InlineKeyboardButton("üìÜ –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="time_next")]
                ]
                await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
                
        except Exception as e:
            logger.error(f"Text handling error: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /start")

    async def handle_time_choice(self, query, user_id, time_choice):
        user_data[user_id]['data']['time'] = time_choice.replace('time_', '')
        await self.show_confirmation(query, user_id)

    async def show_confirmation(self, query, user_id):
        data = user_data[user_id]['data']
        
        service_names = {
            'materials': '–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏', 'workers': '–†–æ–±—ñ—Ç–Ω–∏–∫–∏', 
            'tools': '–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏', 'construction': '–ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏'
        }
        
        time_names = {
            'today': '–°—å–æ–≥–æ–¥–Ω—ñ', 'tomorrow': '–ó–∞–≤—Ç—Ä–∞',
            'week': '–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å', 'next': '–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å'
        }
        
        text = (
            "üìã **–ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –ó–ê–Ø–í–ö–ò**\n\n"
            f"üîß –ü–æ—Å–ª—É–≥–∞: {service_names.get(data['service'], data['service'])}\n"
            f"üë§ –Ü–º'—è: {data['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üìç –ê–¥—Ä–µ—Å–∞: {data['address']}\n"
            f"‚è∞ –¢–µ—Ä–º—ñ–Ω: {time_names.get(data['time'], data['time'])}\n"
        )
        
        if 'count' in data:
            text += f"üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {data['count']}\n"
        
        text += "\n‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É?"
        
        keyboard = [[InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm")]]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

    async def confirm_order(self, query, user_id, context):
        data = user_data[user_id]['data']
        
        service_names = {
            'materials': '–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏', 'workers': '–†–æ–±—ñ—Ç–Ω–∏–∫–∏',
            'tools': '–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏', 'construction': '–ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ —Ä–æ–±–æ—Ç–∏'
        }
        
        message = (
            "üèóÔ∏è **–ù–û–í–ê –ó–ê–Ø–í–ö–ê –î–û–ë–†–û–ë–£–î**\n\n"
            f"üîß **–ü–æ—Å–ª—É–≥–∞:** {service_names.get(data['service'], data['service'])}\n"
            f"üë§ **–ö–ª—ñ—î–Ω—Ç:** {data['name']}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {data['phone']}\n"
            f"üìç **–ê–¥—Ä–µ—Å–∞:** {data['address']}\n"
            f"‚è∞ **–¢–µ—Ä–º—ñ–Ω:** {data['time']}\n"
        )
        
        if 'count' in data:
            message += f"üë• **–ö—ñ–ª—å–∫—ñ—Å—Ç—å:** {data['count']}\n"
            
        message += f"\nüìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\nüèóÔ∏è **–î–û–ë–†–û–ë–£–î**"
        
        try:
            await context.bot.send_message(CHAT_ID, message, parse_mode='Markdown')
            
            success_text = (
                "üéâ **–î–Ø–ö–£–Ñ–ú–û!**\n\n"
                "‚úÖ –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ!\n"
                "üìû –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º 15 —Ö–≤–∏–ª–∏–Ω\n\n"
                "üèóÔ∏è **–î–û–ë–†–û–ë–£–î**\n"
                "‚òéÔ∏è +38 (067) 123-45-67"
            )
            
            await query.edit_message_text(success_text, parse_mode='Markdown')
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in user_data:
                del user_data[user_id]
            
        except Exception as e:
            logger.error(f"Send order error: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: +38 (067) 123-45-67")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
bot_instance = None

class WebhookHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        if self.path == '/webhook':
            try:
                content_length = int(self.headers.get('Content-Length', 0))
                if content_length > 0:
                    post_data = self.rfile.read(content_length)
                    update_data = json.loads(post_data.decode('utf-8'))
                    
                    update = Update.de_json(update_data, bot_instance.app.bot)
                    if update:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        loop.run_until_complete(bot_instance.app.process_update(update))
                        loop.close()
                
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'OK')
                
            except Exception as e:
                logger.error(f"Webhook error: {e}")
                self.send_response(500)
                self.end_headers()
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'Dobrobud Bot OK')
    
    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        pass

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    global bot_instance
    
    try:
        await bot_instance.app.initialize()
        await bot_instance.app.start()
        
        # URL –¥–ª—è webhook
        hostname = os.getenv('RENDER_EXTERNAL_HOSTNAME', 'localhost')
        webhook_url = f"https://{hostname}.onrender.com/webhook"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        await bot_instance.app.bot.set_webhook(
            url=webhook_url,
            allowed_updates=["message", "callback_query"],
            drop_pending_updates=True
        )
        
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
        raise

def run_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        server = HTTPServer(('0.0.0.0', PORT), WebhookHandler)
        logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        server.serve_forever()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global bot_instance
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Dobrobud Bot...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot_instance = DobrobudBot()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(setup_webhook())
        loop.close()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        run_server()
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == '__main__':
    main()
